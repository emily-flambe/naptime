name: Emoji Linter

on:
  pull_request:
    branches: [main]
  push:
    branches-ignore: [main]

jobs:
  emoji-lint:
    name: Check for emojis in codebase
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for emojis in source files
        run: |
          echo "🔍 Scanning for emojis in source code files..."
          
          # Define file patterns to check (exclude documentation and build artifacts)
          PATTERNS=(
            "*.js" "*.jsx" "*.ts" "*.tsx" 
            "*.py" "*.java" "*.go" "*.rs" 
            "*.c" "*.cpp" "*.h" "*.hpp"
            "*.php" "*.rb" "*.swift" "*.kt"
          )
          
          # Build find command with all patterns
          FIND_CMD="find . -type f \("
          for i in "${!PATTERNS[@]}"; do
            if [ $i -eq 0 ]; then
              FIND_CMD="$FIND_CMD -name \"${PATTERNS[$i]}\""
            else
              FIND_CMD="$FIND_CMD -o -name \"${PATTERNS[$i]}\""
            fi
          done
          FIND_CMD="$FIND_CMD \) -not -path \"*/node_modules/*\" -not -path \"*/dist/*\" -not -path \"*/build/*\" -not -path \"*/.git/*\""
          
          # Count total files to scan
          TOTAL_FILES=$(eval $FIND_CMD | wc -l)
          echo "📊 Scanning $TOTAL_FILES source files for emoji violations..."
          
          # Search for emoji patterns using simpler approach that works reliably
          EMOJI_FILES=""
          while IFS= read -r -d '' file; do
            if grep -q -P "[\x{1F600}-\x{1F64F}]|[\x{1F300}-\x{1F5FF}]|[\x{1F680}-\x{1F6FF}]|[\x{1F700}-\x{1F77F}]|[\x{1F780}-\x{1F7FF}]|[\x{1F800}-\x{1F8FF}]|[\x{1F900}-\x{1F9FF}]|[\x{1FA00}-\x{1FA6F}]|[\x{2600}-\x{26FF}]|[\x{2700}-\x{27BF}]|[\x{1F1E6}-\x{1F1FF}]" "$file" 2>/dev/null; then
              if [ -z "$EMOJI_FILES" ]; then
                EMOJI_FILES="$file"
              else
                EMOJI_FILES="$EMOJI_FILES"$'\n'"$file"
              fi
            fi
          done < <(eval $FIND_CMD -print0)
          
          if [ -n "$EMOJI_FILES" ]; then
            echo "❌ EMOJI POLICY VIOLATION: Found emojis in source files!"
            echo "📁 Files containing emojis:"
            echo "$EMOJI_FILES" | while read -r file; do
              echo "  - $file"
              # Show specific emoji matches using Perl regex
              grep --color=never -n -P "[\x{1F600}-\x{1F64F}]|[\x{1F300}-\x{1F5FF}]|[\x{1F680}-\x{1F6FF}]|[\x{1F700}-\x{1F77F}]|[\x{1F780}-\x{1F7FF}]|[\x{1F800}-\x{1F8FF}]|[\x{1F900}-\x{1F9FF}]|[\x{1FA00}-\x{1FA6F}]|[\x{2600}-\x{26FF}]|[\x{2700}-\x{27BF}]|[\x{1F1E6}-\x{1F1FF}]" "$file" | head -3
            done
            echo ""
            echo "🚫 This violates the project's strict no-emoji policy!"
            echo "Please remove all emojis from source code, comments, and strings."
            exit 1
          else
            FILES_WITH_EMOJIS=0
            echo "✅ SUCCESS: No emojis found in $TOTAL_FILES source files!"
            echo "🎉 Codebase complies with no-emoji policy."
          fi
          
          # Set outputs for other steps
          echo "has-emojis=$([ -n \"$EMOJI_FILES\" ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "emoji-count=0" >> $GITHUB_OUTPUT
          echo "files-with-emojis=${FILES_WITH_EMOJIS:-0}" >> $GITHUB_OUTPUT
          echo "total-files=$TOTAL_FILES" >> $GITHUB_OUTPUT
        id: emoji-check
        
      - name: Report Results
        if: always()
        run: |
          echo "Has emojis: ${{ steps.emoji-check.outputs.has-emojis }}"
          echo "Emoji count: ${{ steps.emoji-check.outputs.emoji-count }}"
          echo "Files with emojis: ${{ steps.emoji-check.outputs.files-with-emojis }}"
          echo "Total files scanned: ${{ steps.emoji-check.outputs.total-files }}"
          
      - name: Fail if emojis found
        if: steps.emoji-check.outputs.has-emojis == 'true'
        run: |
          echo "ERROR: Emojis found in codebase! This violates the project's no-emoji policy."
          echo "Please remove all emojis from source code, comments, and documentation."
          exit 1